import { TypeChainTarget, Config, FileDescription, CodegenConfig } from 'fuelchain';
import { Dictionary } from 'ts-essentials';

declare type SvmType = BoolType | U8intType | U16intType | U32intType | U64intType | ByteType | B256Type | AddressType | StringType | ArrayType | TupleType | EnumType | StructType | UnknownType;
/**
 * Like SvmType but with void
 */
declare type SvmOutputType = SvmType | VoidType;
declare type BoolType = {
    type: 'bool';
    originalType: string;
};
declare type U8intType = {
    type: 'u8';
    bits: 8;
    originalType: string;
};
declare type U16intType = {
    type: 'u16';
    bits: 16;
    originalType: string;
};
declare type U32intType = {
    type: 'u32';
    bits: 32;
    originalType: string;
};
declare type U64intType = {
    type: 'u64';
    bits: 64;
    originalType: string;
};
declare type ByteType = {
    type: 'byte';
    size: 1;
    originalType: string;
};
declare type B256Type = {
    type: 'b256';
    originalType: string;
};
declare type AddressType = {
    type: 'address';
    originalType: string;
};
declare type StringType = {
    type: 'string';
    size: number;
    originalType: string;
};
declare type ArrayType = {
    type: 'array';
    itemType: SvmType;
    size?: number;
    originalType: string;
};
declare type TupleType = {
    type: 'tuple';
    structName: string;
    components: SvmSymbol[];
    originalType: string;
};
declare type EnumType = {
    type: 'enum';
    structName: string;
    components: SvmSymbol[];
    originalType: string;
};
declare type StructType = {
    type: 'struct';
    structName: string;
    components: SvmSymbol[];
    originalType: string;
};
declare type UnknownType = {
    type: 'unknown';
    originalType: string;
};
declare type VoidType = {
    type: 'void';
};
declare type SvmSymbol = {
    type: SvmType;
    name: string;
};

interface AbiParameter {
    name: string;
    type: SvmType;
}
interface AbiOutputParameter {
    name: string;
    type: SvmOutputType;
    components?: AbiOutputParameter[];
}
interface FunctionDocumentation {
    author?: string;
    details?: string;
    notice?: string;
    params?: {
        [paramName: string]: string;
    };
    return?: string;
}
interface FunctionDeclaration {
    name: string;
    inputs: AbiParameter[];
    outputs: AbiOutputParameter[];
    documentation?: FunctionDocumentation;
}
interface Contract {
    name: string;
    rawName: string;
    functions: Dictionary<FunctionDeclaration[]>;
    structs: Dictionary<StructType[]>;
    tuples: Dictionary<TupleType[]>;
    enums: Dictionary<EnumType[]>;
    documentation?: {
        author?: string;
        details?: string;
        notice?: string;
    };
}
interface RawAbiParameter {
    name: string;
    type: string;
    components?: RawAbiParameter[];
}
interface RawAbiDefinition {
    name: string;
    inputs: RawAbiParameter[];
    outputs: RawAbiParameter[];
    type: string;
}
/**
 * Extract JSON abi from raw json strings
 */
declare function extractAbi$1(rawJson: string): RawAbiDefinition[];

declare class Fuels extends TypeChainTarget {
    name: string;
    private readonly allContracts;
    private readonly outDirAbs;
    private readonly contractCache;
    constructor(config: Config);
    transformFile(file: FileDescription): FileDescription[] | void;
    genContractTypingsFile(contract: Contract, codegenConfig: CodegenConfig): FileDescription;
    afterRun(): FileDescription[];
    private genReExports;
}
declare const extractAbi: typeof extractAbi$1;

export { Fuels as default, extractAbi };

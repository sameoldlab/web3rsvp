var B=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(s,e)=>(typeof require!="undefined"?require:s)[e]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var F=(o,s)=>()=>(o&&(s=o(o=0)),s);var i=F(()=>{});i();i();i();i();i();import{arrayify as ie}from"@ethersproject/bytes";i();var R,L="Node";typeof globalThis<"u"&&globalThis.crypto&&(R=globalThis.crypto,L="Web");if(!R&&typeof B=="function")try{R=B("crypto"),L="Node"}catch(o){console.error("keystore expects a standard Web browser or Node environment.",o)}var h=R,S=L;i();var T=o=>S==="Node"?h.randomBytes(o):h.getRandomValues(new Uint8Array(o));i();import{coinQuantityfy as X,ScriptTransactionRequest as Y}from"@fuel-ts/providers";i();i();var l="http://127.0.0.1:4000/graphql";i();import{HDWallet as N}from"@fuel-ts/hdwallet";import{Mnemonic as $}from"@fuel-ts/mnemonic";import{Signer as W}from"@fuel-ts/signer";i();import{arrayify as k,hexlify as _}from"@ethersproject/bytes";import{Address as z,addressify as D}from"@fuel-ts/address";import{NativeAssetId as w}from"@fuel-ts/constants";import{AbstractWallet as Q}from"@fuel-ts/interfaces";import{bn as V}from"@fuel-ts/math";import{withdrawScript as G,ScriptTransactionRequest as A,Provider as I,transactionRequestify as E}from"@fuel-ts/providers";import{MAX_GAS_PER_TX as C}from"@fuel-ts/transactions";var g=class extends Q{constructor(e,t=l){super();this.provider=this.connect(t),typeof e=="string"?this._address=z.fromString(e):this._address=D(e)}get address(){return this._address}connect(e){if(e)typeof e=="string"?this.provider=new I(e):this.provider=e;else throw new Error("Provider is required");return this.provider}async getResourcesToSpend(e,t){return this.provider.getResourcesToSpend(this.address,e,t)}async getCoins(){let e=[],r;for(;;){let n=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return e}async getMessages(){let e=[],r;for(;;){let n=await this.provider.getMessages(this.address,{first:9999,after:r});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} messages are not yet supported`)}return e}async getBalance(e=w){return await this.provider.getBalance(this.address,e)}async getBalances(){let e=[],r;for(;;){let n=await this.provider.getBalances(this.address,{first:9999,after:r});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return e}async fund(e){let t=e.calculateFee(),r=await this.getResourcesToSpend([t]);e.addResources(r)}async transfer(e,t,r=w,n={}){let c={gasLimit:C,...n},d=new A(c);d.addCoinOutput(e,t,r);let m=d.calculateFee(),f=[];m.assetId===_(r)?(m.amount.add(t),f=[m]):f=[[t,r],m];let b=await this.getResourcesToSpend(f);return d.addResources(b),this.sendTransaction(d)}async withdrawToBaseLayer(e,t,r={}){let n=k("0x".concat(e.toHexString().substring(2).padStart(64,"0"))),c=k("0x".concat(V(t).toHex().substring(2).padStart(16,"0"))),m={script:new Uint8Array([...k(G.bytes),...n,...c]),gasLimit:C,...r},f=new A(m);f.addMessageOutputs();let b=f.calculateFee(),q=[];b.amount.add(t),q=[b];let U=await this.getResourcesToSpend(q);return f.addResources(U),this.sendTransaction(f)}async sendTransaction(e){let t=E(e);return await this.provider.addMissingVariables(t),this.provider.sendTransaction(t)}async simulateTransaction(e){let t=E(e);return await this.provider.addMissingVariables(t),this.provider.simulate(t)}async buildPredicateTransaction(e,t,r=w,n){let c={fundTransaction:!0,...n},d=new A({gasLimit:C,...c});d.addCoinOutput(e,t,r);let m=[];if(c.fundTransaction&&m.push(d.calculateFee()),m.length){let f=await this.getResourcesToSpend(m);d.addResources(f)}return d}async submitPredicate(e,t,r=w,n){let c=await this.buildPredicateTransaction(e,t,r,n);return(await this.sendTransaction(c)).waitForResult()}async submitSpendPredicate(e,t,r,n=w,c){return this.provider.submitSpendPredicate(e,t,this.address,r,n,c)}};i();import{hashMessage as H,hashTransaction as j}from"@fuel-ts/hasher";import{transactionRequestify as x}from"@fuel-ts/providers";import{Signer as J}from"@fuel-ts/signer";var v=class extends g{constructor(e,t=l){let r=new J(e);super(r.address,t);this.signer=()=>r,this.provider=this.connect(t)}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}async signMessage(e){return this.signer().sign(H(e))}async signTransaction(e){let t=x(e),r=j(t);return this.signer().sign(r)}async populateTransactionWitnessesSignature(e){let t=x(e),r=await this.signTransaction(t);return t.updateWitnessByOwner(this.address,r),t}async sendTransaction(e){let t=x(e);return await this.provider.addMissingVariables(t),this.provider.sendTransaction(await this.populateTransactionWitnessesSignature(t))}async simulateTransaction(e){let t=x(e);return await this.provider.addMissingVariables(t),this.provider.call(await this.populateTransactionWitnessesSignature(t),{utxoValidation:!0})}};v.defaultPath="m/44'/1179993420'/0'/0/0";var P=class extends g{unlock(s){return new a(s,this.provider)}},a=class extends v{lock(){return this.signer=()=>new W("0x00"),new P(this.address,this.provider)}static generate(s){let e=W.generatePrivateKey(s==null?void 0:s.entropy);return new a(e,s==null?void 0:s.provider)}static fromSeed(s,e){let r=N.fromSeed(s).derivePath(e||a.defaultPath);return new a(r.privateKey)}static fromMnemonic(s,e,t){let r=$.mnemonicToSeed(s,t),c=N.fromSeed(r).derivePath(e||a.defaultPath);return new a(c.privateKey)}static fromExtendedKey(s){let e=N.fromExtendedKey(s);return new a(e.privateKey)}};var y=class{static fromAddress(s,e=l){return new P(s,e)}static fromPrivateKey(s,e=l){return new a(s,e)}};y.generate=a.generate,y.fromSeed=a.fromSeed,y.fromMnemonic=a.fromMnemonic,y.fromExtendedKey=a.fromExtendedKey;var Z=async(o,s)=>{let e=new a(process.env.GENESIS_SECRET||T(32),o.provider),t=await e.getResourcesToSpend(s),r=new Y({gasLimit:1e4,gasPrice:1});r.addResources(t),s.map(X).forEach(({amount:c,assetId:d})=>r.addCoinOutput(o.address,c,d)),await(await e.sendTransaction(r)).wait()},it=async(o,s)=>{let e=y.generate({provider:o});return s&&await Z(e,s),e};export{it as generateTestWallet,Z as seedWallet};
//# sourceMappingURL=test-utils.mjs.map
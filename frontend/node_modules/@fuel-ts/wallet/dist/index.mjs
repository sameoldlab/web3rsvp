var O=Object.defineProperty;var B=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(r,e)=>(typeof require!="undefined"?require:r)[e]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var _=(o,r)=>()=>(o&&(r=o(o=0)),r);var z=(o,r)=>{for(var e in r)O(o,e,{get:r[e],enumerable:!0})};var i=_(()=>{});i();i();import{arrayify as L,hexlify as D}from"@ethersproject/bytes";import{Address as Q,addressify as V}from"@fuel-ts/address";import{NativeAssetId as h}from"@fuel-ts/constants";import{AbstractWallet as G}from"@fuel-ts/interfaces";import{bn as I}from"@fuel-ts/math";import{withdrawScript as H,ScriptTransactionRequest as k,Provider as j,transactionRequestify as K}from"@fuel-ts/providers";import{MAX_GAS_PER_TX as A}from"@fuel-ts/transactions";i();var l="http://127.0.0.1:4000/graphql";var g=class extends G{constructor(e,t=l){super();this.provider=this.connect(t),typeof e=="string"?this._address=Q.fromString(e):this._address=V(e)}get address(){return this._address}connect(e){if(e)typeof e=="string"?this.provider=new j(e):this.provider=e;else throw new Error("Provider is required");return this.provider}async getResourcesToSpend(e,t){return this.provider.getResourcesToSpend(this.address,e,t)}async getCoins(){let e=[],s;for(;;){let n=await this.provider.getCoins(this.address,void 0,{first:9999,after:s});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return e}async getMessages(){let e=[],s;for(;;){let n=await this.provider.getMessages(this.address,{first:9999,after:s});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} messages are not yet supported`)}return e}async getBalance(e=h){return await this.provider.getBalance(this.address,e)}async getBalances(){let e=[],s;for(;;){let n=await this.provider.getBalances(this.address,{first:9999,after:s});if(e.push(...n),!(n.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return e}async fund(e){let t=e.calculateFee(),s=await this.getResourcesToSpend([t]);e.addResources(s)}async transfer(e,t,s=h,n={}){let c={gasLimit:A,...n},d=new k(c);d.addCoinOutput(e,t,s);let m=d.calculateFee(),f=[];m.assetId===D(s)?(m.amount.add(t),f=[m]):f=[[t,s],m];let b=await this.getResourcesToSpend(f);return d.addResources(b),this.sendTransaction(d)}async withdrawToBaseLayer(e,t,s={}){let n=L("0x".concat(e.toHexString().substring(2).padStart(64,"0"))),c=L("0x".concat(I(t).toHex().substring(2).padStart(16,"0"))),m={script:new Uint8Array([...L(H.bytes),...n,...c]),gasLimit:A,...s},f=new k(m);f.addMessageOutputs();let b=f.calculateFee(),q=[];b.amount.add(t),q=[b];let M=await this.getResourcesToSpend(q);return f.addResources(M),this.sendTransaction(f)}async sendTransaction(e){let t=K(e);return await this.provider.addMissingVariables(t),this.provider.sendTransaction(t)}async simulateTransaction(e){let t=K(e);return await this.provider.addMissingVariables(t),this.provider.simulate(t)}async buildPredicateTransaction(e,t,s=h,n){let c={fundTransaction:!0,...n},d=new k({gasLimit:A,...c});d.addCoinOutput(e,t,s);let m=[];if(c.fundTransaction&&m.push(d.calculateFee()),m.length){let f=await this.getResourcesToSpend(m);d.addResources(f)}return d}async submitPredicate(e,t,s=h,n){let c=await this.buildPredicateTransaction(e,t,s,n);return(await this.sendTransaction(c)).waitForResult()}async submitSpendPredicate(e,t,s,n=h,c){return this.provider.submitSpendPredicate(e,t,this.address,s,n,c)}};i();import{hashMessage as J,hashTransaction as $}from"@fuel-ts/hasher";import{transactionRequestify as R}from"@fuel-ts/providers";import{Signer as X}from"@fuel-ts/signer";var T=class extends g{constructor(e,t=l){let s=new X(e);super(s.address,t);this.signer=()=>s,this.provider=this.connect(t)}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}async signMessage(e){return this.signer().sign(J(e))}async signTransaction(e){let t=R(e),s=$(t);return this.signer().sign(s)}async populateTransactionWitnessesSignature(e){let t=R(e),s=await this.signTransaction(t);return t.updateWitnessByOwner(this.address,s),t}async sendTransaction(e){let t=R(e);return await this.provider.addMissingVariables(t),this.provider.sendTransaction(await this.populateTransactionWitnessesSignature(t))}async simulateTransaction(e){let t=R(e);return await this.provider.addMissingVariables(t),this.provider.call(await this.populateTransactionWitnessesSignature(t),{utxoValidation:!0})}};T.defaultPath="m/44'/1179993420'/0'/0/0";i();i();import{HDWallet as C}from"@fuel-ts/hdwallet";import{Mnemonic as Y}from"@fuel-ts/mnemonic";import{Signer as E}from"@fuel-ts/signer";var w=class extends g{unlock(r){return new a(r,this.provider)}},a=class extends T{lock(){return this.signer=()=>new E("0x00"),new w(this.address,this.provider)}static generate(r){let e=E.generatePrivateKey(r==null?void 0:r.entropy);return new a(e,r==null?void 0:r.provider)}static fromSeed(r,e){let s=C.fromSeed(r).derivePath(e||a.defaultPath);return new a(s.privateKey)}static fromMnemonic(r,e,t){let s=Y.mnemonicToSeed(r,t),c=C.fromSeed(s).derivePath(e||a.defaultPath);return new a(c.privateKey)}static fromExtendedKey(r){let e=C.fromExtendedKey(r);return new a(e.privateKey)}};var y=class{static fromAddress(r,e=l){return new w(r,e)}static fromPrivateKey(r,e=l){return new a(r,e)}};y.generate=a.generate,y.fromSeed=a.fromSeed,y.fromMnemonic=a.fromMnemonic,y.fromExtendedKey=a.fromExtendedKey;var F={};z(F,{generateTestWallet:()=>se,seedWallet:()=>U});i();i();i();i();i();import{arrayify as Ke}from"@ethersproject/bytes";i();var x,N="Node";typeof globalThis<"u"&&globalThis.crypto&&(x=globalThis.crypto,N="Web");if(!x&&typeof B=="function")try{x=B("crypto"),N="Node"}catch(o){console.error("keystore expects a standard Web browser or Node environment.",o)}var v=x,S=N;i();var P=o=>S==="Node"?v.randomBytes(o):v.getRandomValues(new Uint8Array(o));i();import{coinQuantityfy as te,ScriptTransactionRequest as re}from"@fuel-ts/providers";var U=async(o,r)=>{let e=new a(process.env.GENESIS_SECRET||P(32),o.provider),t=await e.getResourcesToSpend(r),s=new re({gasLimit:1e4,gasPrice:1});s.addResources(t),r.map(te).forEach(({amount:c,assetId:d})=>s.addCoinOutput(o.address,c,d)),await(await e.sendTransaction(s)).wait()},se=async(o,r)=>{let e=y.generate({provider:o});return r&&await U(e,r),e};export{g as BaseWalletLocked,T as BaseWalletUnlocked,F as TestUtils,y as Wallet,w as WalletLocked,a as WalletUnlocked};
//# sourceMappingURL=index.mjs.map
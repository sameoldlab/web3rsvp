{"version":3,"sources":["../src/index.ts","../src/contracts/contract-factory.ts","../src/util.ts","../src/contracts/contract.ts","../src/contracts/functions/invocation-scope.ts","../src/contracts/functions/base-invocation-scope.ts","../src/scripts.ts","../src/contracts/multicall/static-out/multicall-bin.ts","../src/contracts/functions/invocation-results.ts","../src/contracts/functions/multicall-scope.ts"],"sourcesContent":["export * from './types';\nexport { default as ContractFactory } from './contracts/contract-factory';\nexport { default as Contract } from './contracts/contract';\nexport { FunctionInvocationScope } from './contracts/functions/invocation-scope';\nexport { MultiCallInvocationScope } from './contracts/functions/multicall-scope';\nexport {\n  InvocationResult,\n  FunctionInvocationResult,\n} from './contracts/functions/invocation-results';\nexport * as ContractUtils from './util';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { randomBytes } from '@fuel-ts/keystore';\nimport type { CreateTransactionRequestLike } from '@fuel-ts/providers';\nimport { Provider, CreateTransactionRequest } from '@fuel-ts/providers';\nimport type { StorageSlot } from '@fuel-ts/transactions';\nimport { MAX_GAS_PER_TX } from '@fuel-ts/transactions';\nimport { BaseWalletLocked } from '@fuel-ts/wallet';\n\nimport { getContractId, getContractStorageRoot, includeHexPrefix } from '../util';\n\nimport Contract from './contract';\n\nconst logger = new Logger(process.env.BUILD_VERSION || '~');\n\ntype DeployContractOptions = {\n  salt?: BytesLike;\n  storageSlots?: StorageSlot[];\n  stateRoot?: BytesLike;\n} & CreateTransactionRequestLike;\n\nexport default class ContractFactory {\n  bytecode: BytesLike;\n  interface: Interface;\n  provider!: Provider | null;\n  wallet!: BaseWalletLocked | null;\n\n  constructor(\n    bytecode: BytesLike,\n    abi: JsonAbi | Interface,\n    walletOrProvider: BaseWalletLocked | Provider | null = null\n  ) {\n    this.bytecode = bytecode;\n\n    if (abi instanceof Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new Interface(abi);\n    }\n\n    if (walletOrProvider instanceof BaseWalletLocked) {\n      this.provider = walletOrProvider.provider;\n      this.wallet = walletOrProvider;\n    } else if (walletOrProvider instanceof Provider) {\n      this.provider = walletOrProvider;\n      this.wallet = null;\n    } else {\n      this.provider = null;\n      this.wallet = null;\n    }\n  }\n\n  connect(provider: Provider | null) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n\n  async deployContract(deployContractOptions?: DeployContractOptions) {\n    if (!this.wallet) {\n      return logger.throwArgumentError('Cannot deploy without wallet', 'wallet', this.wallet);\n    }\n\n    const storageSlots = deployContractOptions?.storageSlots\n      ?.map(({ key, value }) => ({\n        key: includeHexPrefix(key),\n        value: includeHexPrefix(value),\n      }))\n      .sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n\n    const options = {\n      salt: randomBytes(32),\n      ...deployContractOptions,\n      storageSlots: storageSlots || [],\n    };\n\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(this.bytecode, options.salt, stateRoot);\n    const request = new CreateTransactionRequest({\n      gasPrice: 0,\n      gasLimit: MAX_GAS_PER_TX,\n      bytecodeWitnessIndex: 0,\n      witnesses: [this.bytecode],\n      ...options,\n    });\n    request.addContractCreatedOutput(contractId, stateRoot);\n    await this.wallet.fund(request);\n\n    const response = await this.wallet.sendTransaction(request);\n\n    await response.wait();\n\n    return new Contract(contractId, this.interface, this.wallet);\n  }\n}\n","import type { BytesLike, DataOptions } from '@ethersproject/bytes';\nimport { hexlify, arrayify, concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport SparseMerkleTree from '@fuel-ts/sparsemerkle';\nimport type { StorageSlot } from '@fuel-ts/transactions';\n\nexport const getContractRoot = (bytecode: Uint8Array): string => {\n  const chunkSize = 8;\n  const chunks: Uint8Array[] = [];\n  for (let offset = 0; offset < bytecode.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytecode.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\n\nexport const getContractStorageRoot = (storageSlots: StorageSlot[]): string => {\n  const tree = new SparseMerkleTree();\n\n  storageSlots.forEach(({ key, value }) => tree.update(key, value));\n\n  return tree.root;\n};\n\nexport const getContractId = (\n  bytecode: BytesLike,\n  salt: BytesLike,\n  stateRoot: BytesLike\n): string => {\n  const root = getContractRoot(arrayify(bytecode));\n  const contractId = sha256(concat(['0x4655454C', salt, root, stateRoot]));\n  return contractId;\n};\n\n/**\n * Generic assert function to avoid undesirable errors\n */\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexport const includeHexPrefix = (value: string, options?: DataOptions) =>\n  hexlify(value, {\n    ...options,\n    allowMissingPrefix: true,\n  });\n","import type { FunctionFragment, JsonAbi, JsonFlatAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type { AbstractAddress, AbstractContract } from '@fuel-ts/interfaces';\nimport type { Provider } from '@fuel-ts/providers';\nimport { BaseWalletLocked } from '@fuel-ts/wallet';\n\nimport type { InvokeFunctions } from '../types';\n\nimport { FunctionInvocationScope } from './functions/invocation-scope';\nimport { MultiCallInvocationScope } from './functions/multicall-scope';\n\nexport default class Contract implements AbstractContract {\n  id!: AbstractAddress;\n  provider!: Provider | null;\n  interface!: Interface;\n  wallet!: BaseWalletLocked | null;\n  functions: InvokeFunctions = {};\n\n  constructor(\n    id: string | AbstractAddress,\n    abi: JsonAbi | JsonFlatAbi | Interface,\n    walletOrProvider: BaseWalletLocked | Provider | null = null\n  ) {\n    this.interface = abi instanceof Interface ? abi : new Interface(abi);\n    this.id = Address.fromAddressOrString(id);\n\n    if (walletOrProvider instanceof BaseWalletLocked) {\n      this.provider = walletOrProvider.provider;\n      this.wallet = walletOrProvider;\n    } else {\n      this.provider = walletOrProvider;\n      this.wallet = null;\n    }\n\n    Object.keys(this.interface.functions).forEach((name) => {\n      const fragment = this.interface.getFunction(name);\n      Object.defineProperty(this.functions, fragment.name, {\n        value: this.buildFunction(fragment),\n        writable: false,\n      });\n    });\n  }\n\n  buildFunction(func: FunctionFragment) {\n    return (...args: Array<unknown>) => new FunctionInvocationScope(this, func, args);\n  }\n\n  multiCall(calls: Array<FunctionInvocationScope>) {\n    return new MultiCallInvocationScope(this, calls);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { FunctionFragment } from '@fuel-ts/abi-coder';\nimport type { CoinQuantity } from '@fuel-ts/providers';\nimport { coinQuantityfy } from '@fuel-ts/providers';\n\nimport type { CallConfig, CallParams } from '../../types';\nimport type Contract from '../contract';\n\nimport { BaseInvocationScope } from './base-invocation-scope';\n\nexport class FunctionInvocationScope<\n  TArgs extends Array<any> = Array<any>,\n  TReturn = any\n> extends BaseInvocationScope<TReturn> {\n  private func: FunctionFragment;\n  private callParameters?: CallParams;\n  private forward?: CoinQuantity;\n  private args: TArgs;\n\n  constructor(contract: Contract, func: FunctionFragment, args: TArgs) {\n    super(contract, false);\n    this.func = func;\n    this.args = args || [];\n    this.setArguments(...args);\n    super.addCall(this);\n  }\n\n  getCallConfig(): CallConfig<TArgs> {\n    return {\n      func: this.func,\n      contract: this.contract,\n      callParameters: this.callParameters,\n      txParameters: this.txParameters,\n      forward: this.forward,\n      args: this.args,\n      bytesOffset: this.transactionRequest.bytesOffset || 0,\n    };\n  }\n\n  setArguments(...args: TArgs) {\n    this.args = args || [];\n    this.updateScriptRequest();\n    return this;\n  }\n\n  callParams(callParams: CallParams) {\n    this.callParameters = callParams;\n\n    if (callParams?.forward) {\n      this.forward = coinQuantityfy(callParams.forward);\n    }\n\n    // Update transaction script with new forward params\n    this.setArguments(...this.args);\n\n    // Update required coins\n    this.updateRequiredCoins();\n\n    return this;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { InputValue } from '@fuel-ts/abi-coder';\nimport type { ContractIdLike } from '@fuel-ts/interfaces';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Provider, CoinQuantity, TransactionRequest } from '@fuel-ts/providers';\nimport { transactionRequestify, ScriptTransactionRequest } from '@fuel-ts/providers';\nimport { MAX_GAS_PER_TX, InputType } from '@fuel-ts/transactions';\n\nimport type { ContractCall } from '../../scripts';\nimport { contractCallScript } from '../../scripts';\nimport type {\n  CallOptions,\n  InvocationScopeLike,\n  TransactionCostOptions,\n  TxParams,\n} from '../../types';\nimport { assert } from '../../util';\nimport type Contract from '../contract';\n\nimport { InvocationCallResult, FunctionInvocationResult } from './invocation-results';\n\nfunction createContractCall(funcScope: InvocationScopeLike): ContractCall {\n  const { contract, args, forward, func, callParameters, bytesOffset } = funcScope.getCallConfig();\n\n  const data = contract.interface.encodeFunctionData(\n    func,\n    args as Array<InputValue>,\n    contractCallScript.getScriptDataOffset() + bytesOffset\n  );\n\n  return {\n    contractId: contract.id,\n    data,\n    assetId: forward?.assetId,\n    amount: forward?.amount,\n    gas: callParameters?.gasLimit,\n  };\n}\n\nexport class BaseInvocationScope<TReturn = any> {\n  transactionRequest: ScriptTransactionRequest;\n  protected contract: Contract;\n  protected functionInvocationScopes: Array<InvocationScopeLike> = [];\n  protected txParameters?: TxParams;\n  protected requiredCoins: CoinQuantity[] = [];\n  protected isMultiCall: boolean = false;\n\n  constructor(contract: Contract, isMultiCall: boolean) {\n    this.contract = contract;\n    this.isMultiCall = isMultiCall;\n    this.transactionRequest = new ScriptTransactionRequest({\n      gasLimit: MAX_GAS_PER_TX,\n    });\n  }\n\n  protected get calls() {\n    return this.functionInvocationScopes.map((funcScope) => createContractCall(funcScope));\n  }\n\n  protected static getCallOptions(options?: CallOptions) {\n    return { fundTransaction: true, ...options };\n  }\n\n  protected updateScriptRequest() {\n    const calls = this.calls;\n    calls.forEach((c) => {\n      this.transactionRequest.addContract(c.contractId);\n    });\n    this.transactionRequest.setScript(contractCallScript, calls);\n  }\n\n  protected getRequiredCoins(): Array<CoinQuantity> {\n    const assets = this.calls\n      .map((call) => ({\n        assetId: String(call.assetId),\n        amount: bn(call.amount || 0),\n      }))\n      .concat(this.transactionRequest.calculateFee())\n      .filter(({ assetId, amount }) => assetId && !bn(amount).isZero());\n    return assets;\n  }\n\n  protected updateRequiredCoins() {\n    const assets = this.getRequiredCoins();\n    const reduceForwardCoins = (\n      requiredCoins: Map<any, CoinQuantity>,\n      { assetId, amount }: CoinQuantity\n    ) => {\n      const currentAmount = requiredCoins.get(assetId)?.amount || bn(0);\n\n      return requiredCoins.set(assetId, {\n        assetId: String(assetId),\n        amount: currentAmount.add(amount),\n      });\n    };\n    this.requiredCoins = Array.from(\n      assets.reduce(reduceForwardCoins, new Map<any, CoinQuantity>()).values()\n    );\n  }\n\n  protected addCall(funcScope: InvocationScopeLike) {\n    this.addCalls([funcScope]);\n    return this;\n  }\n\n  protected addCalls(funcScopes: Array<InvocationScopeLike>) {\n    this.functionInvocationScopes.push(...funcScopes);\n    this.updateScriptRequest();\n    this.updateRequiredCoins();\n    return this;\n  }\n\n  protected async prepareTransaction(options?: CallOptions) {\n    // Update request scripts before call\n    this.updateScriptRequest();\n\n    // Update required coins before call\n    this.updateRequiredCoins();\n\n    // Check if gasLimit is less than the\n    // sum of all call gasLimits\n    this.checkGasLimitTotal();\n\n    // Add funds required on forwards and to pay gas\n    const opts = BaseInvocationScope.getCallOptions(options);\n    if (opts.fundTransaction && this.contract.wallet) {\n      await this.fundWithRequiredCoins();\n    }\n  }\n\n  protected checkGasLimitTotal() {\n    const gasLimitOnCalls = this.calls.reduce((total, call) => total.add(call.gas || 0), bn(0));\n    if (gasLimitOnCalls.gt(this.transactionRequest.gasLimit)) {\n      throw new Error(\n        \"Transaction gasLimit can't be lower than the sum of the forwarded gas of each call\"\n      );\n    }\n  }\n\n  /**\n   * Run a valid transaction in dryRun mode and returns useful details about\n   * gasUsed, gasPrice and transaction estimate fee in native coins.\n   */\n  async getTransactionCost(options?: TransactionCostOptions) {\n    const provider = (this.contract.wallet?.provider || this.contract.provider) as Provider;\n    assert(provider, 'Wallet or Provider is required!');\n\n    await this.prepareTransaction(options);\n    const request = transactionRequestify(this.transactionRequest);\n    request.gasPrice = bn(toNumber(request.gasPrice) || toNumber(options?.gasPrice || 0));\n    const txCost = await provider.getTransactionCost(request, options?.tolerance);\n\n    return txCost;\n  }\n\n  /**\n   * Add to the transaction scope the required amount of unspent UTXO's.\n   *\n   * Required Amount = forward coins + transfers + gas fee.\n   */\n  async fundWithRequiredCoins() {\n    // Clean coin inputs before add new coins to the request\n    this.transactionRequest.inputs = this.transactionRequest.inputs.filter(\n      (i) => i.type !== InputType.Coin\n    );\n    const resources = await this.contract.wallet?.getResourcesToSpend(this.requiredCoins);\n    this.transactionRequest.addResources(resources || []);\n    return this;\n  }\n\n  txParams(txParams: TxParams) {\n    this.txParameters = txParams;\n    const request = this.transactionRequest;\n\n    request.gasLimit = bn(txParams.gasLimit || request.gasLimit);\n    request.gasPrice = bn(txParams.gasPrice || request.gasPrice);\n    request.addVariableOutputs(this.txParameters?.variableOutputs || 0);\n\n    return this;\n  }\n\n  addContracts(contracts: Array<ContractIdLike>) {\n    contracts.forEach((contract) => this.transactionRequest.addContract(contract));\n    return this;\n  }\n\n  /**\n   * Prepare transaction request object, adding Inputs, Outputs, coins, check gas costs\n   * and transaction validity.\n   *\n   * It's possible to get the transaction without adding coins, by passing `fundTransaction`\n   * as false.\n   */\n  async getTransactionRequest(options?: CallOptions): Promise<TransactionRequest> {\n    await this.prepareTransaction(options);\n    return this.transactionRequest;\n  }\n\n  /**\n   * Submits a transaction to the blockchain.\n   *\n   * This is a final action and will spend the coins and change the state of the contract.\n   * It also means that invalid transactions will throw an error, and consume gas. To avoid this\n   * running invalid tx and consuming gas try to `simulate` first when possible.\n   */\n  async call<T = TReturn>(options?: CallOptions): Promise<FunctionInvocationResult<T>> {\n    assert(this.contract.wallet, 'Wallet is required!');\n\n    const transactionRequest = await this.getTransactionRequest(options);\n    const response = await this.contract.wallet.sendTransaction(transactionRequest);\n\n    return FunctionInvocationResult.build<T>(\n      this.functionInvocationScopes,\n      response,\n      this.isMultiCall,\n      this.contract\n    );\n  }\n\n  /**\n   * Run a valid transaction and return the result without change the chain state.\n   * This means, all signatures are validated but no UTXO is spent.\n   *\n   * This method is useful for validate propose to avoid spending coins on invalid TXs, also\n   * to estimate the amount of gas that will be required to run the transaction.\n   */\n  async simulate<T = TReturn>(options?: CallOptions): Promise<InvocationCallResult<T>> {\n    assert(this.contract.wallet, 'Wallet is required!');\n\n    const transactionRequest = await this.getTransactionRequest(options);\n    const result = await this.contract.wallet.simulateTransaction(transactionRequest);\n\n    return InvocationCallResult.build<T>(this.functionInvocationScopes, result, this.isMultiCall);\n  }\n\n  /**\n   * Executes a transaction in dry run mode, without UTXO validations.\n   *\n   * A transaction in dry run mode can't change the state of the blockchain. It can be useful to access readonly\n   * methods or just ust get.\n   * The UTXO validation disable in this case, enables to send invalid inputs to emulate different conditions, of a\n   * transaction\n   */\n  async dryRun<T = TReturn>(options?: CallOptions): Promise<InvocationCallResult<T>> {\n    const provider = (this.contract.wallet?.provider || this.contract.provider) as Provider;\n    assert(provider, 'Wallet or Provider is required!');\n\n    const transactionRequest = await this.getTransactionRequest(options);\n    const request = transactionRequestify(transactionRequest);\n    const response = await provider.call(request, {\n      utxoValidation: false,\n    });\n    const result = await InvocationCallResult.build<T>(\n      this.functionInvocationScopes,\n      response,\n      this.isMultiCall\n    );\n\n    return result;\n  }\n\n  /**\n   * Executes a readonly contract method call.\n   *\n   * Under the hood it uses the `dryRun` method but don't fund the transaction\n   * with coins by default, for emulating executions with forward coins use `dryRun`\n   * or pass the options.fundTransaction as true\n   */\n  async get<T = TReturn>(options?: CallOptions): Promise<InvocationCallResult<T>> {\n    return this.dryRun<T>({\n      fundTransaction: false,\n      ...options,\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport type { ArrayCoder, StructCoder } from '@fuel-ts/abi-coder';\nimport { AbiCoder, U64Coder } from '@fuel-ts/abi-coder';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport { Script } from '@fuel-ts/script';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport contractCallScriptAbi from './contracts/multicall/static-out/multicall-abi.json';\nimport contractCallScriptBin from './contracts/multicall/static-out/multicall-bin';\n\nexport type ContractCall = {\n  contractId: AbstractAddress;\n  data: BytesLike;\n  amount?: BigNumberish;\n  assetId?: BytesLike;\n  gas?: BigNumberish;\n};\n\n/**\n * A script that calls contracts\n *\n * Accepts a contract ID and function data\n * Returns function result\n */\nexport const contractCallScript = new Script<ContractCall[], Uint8Array[]>(\n  // Script to call the contract\n  contractCallScriptBin,\n  (contractCalls) => {\n    const inputs = contractCallScriptAbi[0].inputs;\n    const scriptDataCoder = new AbiCoder().getCoder(inputs[0]) as StructCoder<any>;\n    const callSlotsLength = (scriptDataCoder.coders.calls as ArrayCoder<any>).length;\n\n    if (contractCalls.length > callSlotsLength) {\n      throw new Error(`At most ${callSlotsLength} calls are supported`);\n    }\n\n    let refArgData = new Uint8Array();\n\n    const scriptCallSlots = [];\n    for (let i = 0; i < callSlotsLength; i += 1) {\n      const call = contractCalls[i];\n\n      let scriptCallSlot;\n      if (call) {\n        // Decode data in internal format\n        const dataArray = arrayify(call.data);\n        const functionSelector = dataArray.slice(0, 8);\n        const isReferenceType = dataArray.slice(8, 16).some((b) => b === 0x01);\n        const args = dataArray.slice(16);\n\n        let fnArg;\n        if (isReferenceType) {\n          fnArg = { Data: [refArgData.length, args.length] };\n          refArgData = concat([refArgData, args]);\n        } else {\n          fnArg = { Value: new U64Coder().decode(args, 0)[0] };\n        }\n\n        const scriptCall = {\n          contract_id: { value: call.contractId },\n          fn_selector: new U64Coder().decode(functionSelector, 0)[0],\n          fn_arg: fnArg,\n          parameters: {\n            amount: call.amount ? bn(call.amount) : undefined,\n            asset_id: call.assetId ? { value: call.assetId } : undefined,\n            gas: call.gas ? bn(call.gas) : undefined,\n          },\n        };\n\n        scriptCallSlot = scriptCall;\n      } else {\n        scriptCallSlot = undefined;\n      }\n\n      scriptCallSlots.push(scriptCallSlot);\n    }\n\n    const scriptData = {\n      calls: scriptCallSlots,\n    };\n\n    const encodedScriptData = scriptDataCoder.encode(scriptData as any);\n    return concat([encodedScriptData, refArgData]);\n  },\n  (result) => {\n    if (toNumber(result.code) !== 0) {\n      throw new Error(`Script returned non-zero result: ${result.code}`);\n    }\n    if (result.returnReceipt.type !== ReceiptType.ReturnData) {\n      throw new Error(`Expected returnReceipt to be a ReturnDataReceipt`);\n    }\n    const encodedScriptReturn = arrayify(result.returnReceipt.data);\n    const outputs = contractCallScriptAbi[0].outputs;\n    const scriptDataCoder = new AbiCoder().getCoder(outputs[0]) as StructCoder<any>;\n    const [scriptReturn, scriptReturnLength] = scriptDataCoder.decode(encodedScriptReturn, 0);\n    const returnData = encodedScriptReturn.slice(scriptReturnLength);\n\n    const contractCallResults: any[] = [];\n    (scriptReturn.call_returns as any[]).forEach((callResult, i) => {\n      if (callResult) {\n        if (callResult.Data) {\n          const [offset, length] = callResult.Data;\n          contractCallResults[i] = returnData.slice(\n            toNumber(offset),\n            toNumber(offset) + toNumber(length)\n          );\n        } else {\n          contractCallResults[i] = new U64Coder().encode(callResult.Value);\n        }\n      }\n    });\n\n    return contractCallResults;\n  }\n);\n","export default '0x90000004470000000000000000000cd45dfcc00110fff3001a5c5000910005b861440006724002d0164114005b40100d360000006158000c61440001504175305f5d10a6504175305d4570a6504171385f5d1027504171385d417027134100007340001a9000001f1a445000910000085d43f0005f4500009000002b504171385d4170271341004073400024900000291a445000910000085d43f0015f4500009000002b360000001a44000050417528504175286041100850457528504170085041700860411008504170085d4100001341000073400037900000396144000c9000003b360000001a440000504174305f5d1086504174305d4570865d43f00210450440504174485f5d108961440001504175405f5d10a8504175405d4570a8504171405f5d1028504171405d417028134100007340004f900000541a445000910000085d43f0005f45000090000060504171405d41702813410040734000599000005e1a445000910000085d43f0015f45000090000060360000001a44000050417538504175386041100850457538504170005041700060411008504170005d410000134100007340006c9000006e6144000690000078504170005d410000134100407340007390000076360000001a44000090000078360000001a4400005d43f00220451400504173805f5d1070504174485d497089504173805d4170701a445000910000105f4520005f450001504175a8504175a8604110105d47f00326440000504470015041726050417260604110a026000000504070011a445000910000105f4500005f440001504174785041747860411010504173505f5c006a5d47f0025d43f00412451400504173005f5d1060504173505d45706a504173005d41706016411400734000a4900000b150496000504173505d41706a5545009010452440504170785041707860411090504170785d41000013410040734001249000031f504972601a445000910000a050411000604120a05041748850417488604110a026000000504070011a445000910000105f4500005f44000150417198504171986041101050517198505574885d454001504174085f5d10815d4540015d43f00310450440504173c85f5d10795d4140005d4d4001504573c85d457079154914c0734800d3900000e12644000050487001504573a85f5d207515453000734400da900000de504573a85d457075284504c0900000de504173a85d417075900000e15f510000504173c85d4170795f5100015d454000504174085d417081104504405d43f0032845540050557198505174785d41400113410000734000f1900000f35d4150019000011c5d455001504174105f5d10825d4550015d41400110450440504173d05f5d107a5d4150005d4d5001504573d05d45707a154914c073480102900001102644000050487001504573b05f5d207615453000734401099000010d504573b05d457076284504c09000010d504173b05d417076900001105f550000504173d05d41707a5f5500015d4940005d455000504174105d417082104504405d414001284524005d417082504171985d450000504171985d41000125450000504574885d43f003254500005041707850450008504171a8504171a860411088504171a850450028504171085041710860411018504171085d41000013410000734001339000013f504171085d450002504175485f5d10a9504175485d4970a91a445000910000185d43f0005f4500005f4520029000017b504171085d41000013410040734001449000016050417108504100085d450000504173e85f5d107d50417108504100085d450001504173785f5d106f504175a85d450000504173e85d41707d10450440504173785d41706f1a485000910000105f4910005f4900011a445000910000185d43f0015f45000050411008604120109000017b50417108504100085d450000504173f05f5d107e50417108504100085d450001504173905f5d1072504175a85d450000504173f05d41707e10450440504173905d4170721a485000910000105f4910005f4900011a445000910000185d43f0015f4500005041100860412010504173085041730860411018504171a850550000504171a85d51000450457308504171a8504d0040504170105041701060411018504170105d410000134100007340018d90000194504170105d450002504175505f5d10aa504175505d4570aa900001a8504170105d4100001341004073400199900001a150417010504100085d450000504174385f5d1087504174385d457087900001a850417010504100085d450000504174505f5d108a504174505d45708a504173205f5d1064504173205d4970641a4450009100003050411000604150205f4540045f45200550417230504172306041103050453000504170285041702860411010504170285d41000013410040734001be900001c5504170285d450001504171485f5d1029504171485d457029900001cd504170285d41000013410000734001ca900001cc1a440000900001cd1a440000504171505f5d102a50453010504170385041703860411028504170385d41000013410040734001d8900001df504170385045000850417358504173586041102050497358900001f1504170385d41000013410000734001e4900001eb1a485000910000205d47f00a104513005041200060411020900001f11a485000910000205d47f00a10451300504120006041102050417158504171586041202050453038504170605041706060411010504170605d41000013410040734001fd90000204504170605d450001504173405f5d1068504173405d4570689000020c504170605d41000013410000734002099000020b1a44a0009000020c1a44a000504173485f5d1069504d7230504171505d49702a50457158504173485d4170692d4d24501a44e000504170705f5d100e504170705d41700e134100007340021d900002281a44d000504175785f5d10af504175785d4570af1a485000910000185d43f0005f4900005f4910029000023d504170705d45700e504173885f5d10711a44d000504174585f5d108b504174585d49708b504173885d4170711a445000910000105f4520005f4500011a485000910000185d43f0015f490000504120086041101050417460504174606041201850457460504171205041712060411018504171205d410000134100007340024990000255504171205d450002504175a05f5d10b4504175a05d4970b41a445000910000185d43f0005f4500005f45200290000309504171205d410000134100407340025a900002b250417120504100085d450000504174285f5d108550417120504100085d450001504173985f5d1073504174285d497085504173985d4170731a445000910000105f4520005f45000150417178504171786041101050557478505171785d4140011341000073400275900002775d455001900002a15d455001504174185f5d10835d4550015d41400110450440504173d85f5d107b5d4150005d4d5001504573d85d45707b154914c073480286900002942644000050487001504573b85f5d2077154530007344028d90000291504573b85d457077284504c090000291504173b85d417077900002945f550000504173d85d41707b5f5500015d4940005d455000504174185d417083104504405d41400128452400504174185d457083504173f85f5d107f504173f85d45707f504173985d4170731a485000910000105f4910005f4900011a445000910000185d43f0015f45000050411008604120109000030950417120504100085d450000504174405f5d108850417120504100085d450001504173a05f5d1074504174405d497088504173a05d4170741a445000910000105f4520005f45000150417188504171886041101050557478505171885d41400113410000734002cd900002cf5d455001900002f95d455001504174205f5d10845d4550015d41400110450440504173e05f5d107c5d4150005d4d5001504573e05d45707c154914c0734802de900002ec2644000050487001504573c05f5d207815453000734402e5900002e9504573c05d457078284504c0900002e9504173c05d417078900002ec5f550000504173e05d41707c5f5500015d4940005d455000504174205d417084104504405d41400128452400504174205d457084504174005f5d1080504174005d457080504173a05d4170741a485000910000105f4910005f4900011a445000910000185d43f0015f4500005041100860412010504173285041732860411018504973281a445000910000205d43f0015f450000504110086041201850417558504175586041102050457260504173505d41706a5549002010491480504575585d43f009284914009000032e504175801a445000910000205d43f0005f450000504175806041102050457260504173505d41706a5549002010491480504575805d43f0092849140050417350504173505d41706a104014005f5d006a9000009d470000000000000000000000000000000000000100000000000002d000000000000000a00000000000000090000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000cfc';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable max-classes-per-file */\nimport { U64Coder } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionResult,\n  CallResult,\n  TransactionResponse,\n  TransactionResultReceipt,\n} from '@fuel-ts/providers';\nimport type { ReceiptScriptResult } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport { contractCallScript } from '../../scripts';\nimport type { InvocationScopeLike } from '../../types';\nimport type Contract from '../contract';\n\nfunction getGasUsage(callResult: CallResult) {\n  const scriptResult = callResult.receipts.find((r) => r.type === ReceiptType.ScriptResult) as\n    | ReceiptScriptResult\n    | undefined;\n  return scriptResult?.gasUsed || bn(0);\n}\n\nexport class InvocationResult<T = any> {\n  readonly functionScopes: Array<InvocationScopeLike>;\n  readonly isMultiCall: boolean;\n  readonly gasUsed: BN;\n  readonly value: T;\n\n  constructor(\n    funcScopes: InvocationScopeLike | Array<InvocationScopeLike>,\n    callResult: CallResult,\n    isMultiCall: boolean\n  ) {\n    this.functionScopes = Array.isArray(funcScopes) ? funcScopes : [funcScopes];\n    this.isMultiCall = isMultiCall;\n    this.value = this.getDecodedValue(callResult);\n    this.gasUsed = getGasUsage(callResult);\n  }\n\n  protected getDecodedValue(callResult: CallResult) {\n    const encodedResults = contractCallScript.decodeCallResult(callResult);\n    const returnValues = encodedResults.map((encodedResult, i) => {\n      const { contract, func } = this.functionScopes[i].getCallConfig();\n      return contract.interface.decodeFunctionResult(func, encodedResult)?.[0];\n    });\n    return (this.isMultiCall ? returnValues : returnValues?.[0]) as T;\n  }\n}\n\nexport class FunctionInvocationResult<T = any> extends InvocationResult<T> {\n  readonly transactionId: string;\n  readonly transactionResponse: TransactionResponse;\n  readonly transactionResult: TransactionResult<any>;\n  readonly contract: Contract;\n  readonly logs!: Array<any>;\n\n  constructor(\n    funcScopes: InvocationScopeLike | Array<InvocationScopeLike>,\n    transactionResponse: TransactionResponse,\n    transactionResult: TransactionResult<any>,\n    contract: Contract,\n    isMultiCall: boolean\n  ) {\n    super(funcScopes, transactionResult, isMultiCall);\n    this.transactionResponse = transactionResponse;\n    this.transactionResult = transactionResult;\n    this.transactionId = this.transactionResponse.id;\n    this.contract = contract;\n    this.logs = this.getDecodedLogs(transactionResult.receipts);\n  }\n\n  static async build<T>(\n    funcScope: InvocationScopeLike | Array<InvocationScopeLike>,\n    transactionResponse: TransactionResponse,\n    isMultiCall: boolean,\n    contract: Contract\n  ) {\n    const txResult = await transactionResponse.waitForResult();\n    const fnResult = new FunctionInvocationResult<T>(\n      funcScope,\n      transactionResponse,\n      txResult,\n      contract,\n      isMultiCall\n    );\n    return fnResult;\n  }\n\n  protected getDecodedLogs(receipts: Array<TransactionResultReceipt>) {\n    return receipts.reduce((logs, r) => {\n      if (r.type === ReceiptType.LogData) {\n        return logs.concat(...this.contract.interface.decodeLog(r.data, r.val1.toNumber()));\n      }\n\n      if (r.type === ReceiptType.Log) {\n        return logs.concat(\n          ...this.contract.interface.decodeLog(new U64Coder().encode(r.val0), r.val1.toNumber())\n        );\n      }\n\n      return logs;\n    }, []);\n  }\n}\n\nexport class InvocationCallResult<T = any> extends InvocationResult<T> {\n  readonly callResult: CallResult;\n\n  constructor(\n    funcScopes: InvocationScopeLike | Array<InvocationScopeLike>,\n    callResult: CallResult,\n    isMultiCall: boolean\n  ) {\n    super(funcScopes, callResult, isMultiCall);\n    this.callResult = callResult;\n  }\n\n  static async build<T>(\n    funcScopes: InvocationScopeLike | Array<InvocationScopeLike>,\n    callResult: CallResult,\n    isMultiCall: boolean\n  ) {\n    const fnResult = new InvocationCallResult<T>(funcScopes, callResult, isMultiCall);\n    return fnResult;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type Contract from '../contract';\n\nimport { BaseInvocationScope } from './base-invocation-scope';\nimport type { FunctionInvocationScope } from './invocation-scope';\n\nexport class MultiCallInvocationScope<TReturn = any> extends BaseInvocationScope<TReturn> {\n  constructor(contract: Contract, funcScopes: Array<FunctionInvocationScope>) {\n    super(contract, true);\n    this.addCalls(funcScopes);\n  }\n\n  addCall(funcScope: FunctionInvocationScope) {\n    return super.addCalls([funcScope]);\n  }\n\n  addCalls(funcScopes: Array<FunctionInvocationScope>) {\n    return super.addCalls(funcScopes);\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","Contract","ContractFactory","util_exports","FunctionInvocationResult","FunctionInvocationScope","InvocationResult","MultiCallInvocationScope","__toCommonJS","import_logger","import_abi_coder","import_keystore","import_providers","import_transactions","import_wallet","util_exports","__export","assert","getContractId","getContractRoot","getContractStorageRoot","includeHexPrefix","import_bytes","import_sha2","import_merkle","import_sparsemerkle","getContractRoot","bytecode","chunks","offset","chunk","c","getContractStorageRoot","storageSlots","tree","SparseMerkleTree","key","value","getContractId","salt","stateRoot","root","assert","condition","message","includeHexPrefix","options","import_abi_coder","import_address","import_wallet","import_providers","import_math","import_providers","import_transactions","import_bytes","import_abi_coder","import_math","import_script","import_transactions","multicall_bin_default","contractCallScript","multicall_bin_default","contractCalls","inputs","multicall_abi_default","scriptDataCoder","callSlotsLength","refArgData","scriptCallSlots","i","call","scriptCallSlot","dataArray","functionSelector","isReferenceType","b","args","fnArg","scriptData","encodedScriptData","result","encodedScriptReturn","outputs","scriptReturn","scriptReturnLength","returnData","contractCallResults","callResult","offset","length","import_abi_coder","import_math","import_transactions","getGasUsage","callResult","scriptResult","r","InvocationResult","funcScopes","isMultiCall","returnValues","contractCallScript","encodedResult","i","_a","contract","func","FunctionInvocationResult","transactionResponse","transactionResult","funcScope","txResult","receipts","logs","InvocationCallResult","createContractCall","funcScope","contract","args","forward","func","callParameters","bytesOffset","data","contractCallScript","BaseInvocationScope","isMultiCall","options","calls","c","call","assetId","amount","assets","reduceForwardCoins","requiredCoins","_a","currentAmount","funcScopes","total","provider","assert","request","i","resources","txParams","contracts","transactionRequest","response","FunctionInvocationResult","result","InvocationCallResult","FunctionInvocationScope","BaseInvocationScope","contract","func","args","callParams","MultiCallInvocationScope","BaseInvocationScope","contract","funcScopes","funcScope","Contract","id","abi","walletOrProvider","name","fragment","func","args","FunctionInvocationScope","calls","MultiCallInvocationScope","logger","ContractFactory","bytecode","abi","walletOrProvider","provider","deployContractOptions","_a","storageSlots","key","value","includeHexPrefix","keyA","keyB","options","stateRoot","getContractStorageRoot","contractId","getContractId","request","Contract"]}
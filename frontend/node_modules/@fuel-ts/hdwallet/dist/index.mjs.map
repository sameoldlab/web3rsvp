{"version":3,"sources":["../src/hdwallet.ts"],"sourcesContent":["import { Base58 } from '@ethersproject/basex';\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { hexDataSlice, hexlify, concat, arrayify } from '@ethersproject/bytes';\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from '@ethersproject/sha2';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport { Signer } from '@fuel-ts/signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new Error(`invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new Error('Public and Private Key are missing!');\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new Error('Derive hardened requires privateKey');\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac(SupportedAlgorithm.sha512, chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new Error('Depth too large!');\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(this.depth);\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = concat([prefix, depth, parentFingerprint, index, chainCode, key]);\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const bytes = Base58.decode(extendedKey);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new Error('Invalid extended key');\n    }\n    if (!validChecksum) throw new Error('Invalid checksum key');\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new Error('Invalid depth');\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new Error('Invalid public extended key');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new Error('Invalid private extended key');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n"],"mappings":"AAAA,OAAS,UAAAA,MAAc,uBAEvB,OAAS,gBAAAC,EAAc,WAAAC,EAAS,UAAAC,EAAQ,YAAAC,MAAgB,uBACxD,OAAS,eAAAC,EAAa,aAAAC,EAAW,UAAAC,EAAQ,sBAAAC,MAA0B,sBACnE,OAAS,MAAAC,EAAI,WAAAC,EAAS,SAAAC,MAAa,gBACnC,OAAS,YAAAC,MAAgB,oBACzB,OAAS,UAAAC,MAAc,kBAGvB,IAAMC,EAAiB,WAGjBC,EAAab,EAAQ,YAAY,EACjCc,EAAad,EAAQ,YAAY,EACjCe,EAAaf,EAAQ,YAAY,EACjCgB,EAAahB,EAAQ,YAAY,EAEvC,SAASiB,EAAYC,EAA0B,CAC7C,OAAOpB,EAAO,OAAOG,EAAO,CAACiB,EAAMnB,EAAaM,EAAOA,EAAOa,CAAI,CAAC,EAAG,EAAG,CAAC,CAAC,CAAC,CAAC,CAC/E,CAEA,SAASC,EAAqBC,EAAoB,GAAOC,EAAmB,GAAO,CACjF,OAAID,EACKC,EAAUL,EAAaF,EAEzBO,EAAUN,EAAaF,CAChC,CAEA,SAASS,EAAoBC,EAAyB,CACpD,MAAO,CAACT,EAAYE,CAAU,EAAE,SAAShB,EAAQuB,EAAY,MAAM,EAAG,CAAC,CAAC,CAAC,CAC3E,CAEA,SAASC,EAAmBD,EAAyB,CACnD,MAAO,CAACV,EAAYE,EAAYD,EAAYE,CAAU,EAAE,SACtDhB,EAAQuB,EAAY,MAAM,EAAG,CAAC,CAAC,CACjC,CACF,CAEA,SAASE,EAAUC,EAAcC,EAAgB,EAAG,CAClD,IAAMC,EAAaF,EAAK,MAAM,GAAG,EAEjC,GAAIE,EAAW,SAAW,GAAMA,EAAW,KAAO,KAAOD,IAAU,EACjE,MAAM,IAAI,MAAM,kBAAkBD,GAAM,EAG1C,OAAIE,EAAW,KAAO,KACpBA,EAAW,MAAM,EAGZA,EAAW,IAAKC,GACrB,CAACA,EAAE,QAAQ,GAAG,EAAI,SAASA,EAAG,EAAE,EAAIjB,EAAiB,SAASiB,EAAG,EAAE,CACrE,CACF,CAWA,IAAMC,EAAN,KAAe,CAcb,YAAYC,EAAwB,CAbpC,WAAgB,EAChB,WAAgB,EAChB,iBAAsB/B,EAAQ,YAAY,EAC1C,uBAA4BA,EAAQ,YAAY,EAa9C,GAAI+B,EAAO,WAAY,CACrB,IAAMC,EAAS,IAAIrB,EAAOoB,EAAO,UAAU,EAC3C,KAAK,UAAY/B,EAAQgC,EAAO,mBAAmB,EACnD,KAAK,WAAahC,EAAQ+B,EAAO,UAAU,CAC7C,KAAO,CACL,GAAI,CAACA,EAAO,UACV,MAAM,IAAI,MAAM,qCAAqC,EAEvD,KAAK,UAAY/B,EAAQ+B,EAAO,SAAS,CAC3C,CAEA,KAAK,kBAAoBA,EAAO,mBAAqB,KAAK,kBAC1D,KAAK,YAAchC,EAAaK,EAAUC,EAAO,KAAK,SAAS,CAAC,EAAG,EAAG,CAAC,EACvE,KAAK,MAAQ0B,EAAO,OAAS,KAAK,MAClC,KAAK,MAAQA,EAAO,OAAS,KAAK,MAClC,KAAK,UAAYA,EAAO,SAC1B,CAEA,IAAI,aAAc,CAChB,OAAO,KAAK,cAAc,CAC5B,CASA,YAAYE,EAAe,CACzB,IAAMC,EAAa,KAAK,YAAchC,EAAS,KAAK,UAAU,EACxDiC,EAAYjC,EAAS,KAAK,SAAS,EACnCkC,EAAYlC,EAAS,KAAK,SAAS,EACnCgB,EAAO,IAAI,WAAW,EAAE,EAE9B,GAAIe,EAAQrB,EAAgB,CAC1B,GAAI,CAACsB,EACH,MAAM,IAAI,MAAM,qCAAqC,EAIvDhB,EAAK,IAAIgB,EAAY,CAAC,CACxB,MACEhB,EAAK,IAAIhB,EAAS,KAAK,SAAS,CAAC,EAInCgB,EAAK,IAAIV,EAAQyB,EAAO,CAAC,EAAG,EAAE,EAE9B,IAAMI,EAAQnC,EAASC,EAAYG,EAAmB,OAAQ8B,EAAWlB,CAAI,CAAC,EACxEoB,EAAKD,EAAM,MAAM,EAAG,EAAE,EACtBE,EAAKF,EAAM,MAAM,EAAE,EAEzB,GAAIH,EAAY,CACd,IAAMM,EAAI,qEAEJC,EAAKlC,EAAG+B,CAAE,EAAE,IAAIJ,CAAU,EAAE,IAAIM,CAAC,EAAE,QAAQ,EAAE,EAEnD,OAAO,IAAIV,EAAS,CAClB,WAAYW,EACZ,UAAWF,EACX,MAAAN,EACA,MAAO,KAAK,MAAQ,EACpB,kBAAmB,KAAK,WAC1B,CAAC,CACH,CAGA,IAAMS,EADS,IAAI/B,EAAOX,EAAQsC,CAAE,CAAC,EACnB,SAASH,CAAS,EAEpC,OAAO,IAAIL,EAAS,CAClB,UAAWY,EACX,UAAWH,EACX,MAAAN,EACA,MAAO,KAAK,MAAQ,EACpB,kBAAmB,KAAK,WAC1B,CAAC,CACH,CAQA,WAAWP,EAAc,CAGvB,OAFcD,EAAUC,EAAM,KAAK,KAAK,EAE3B,OAAO,CAACiB,EAAUV,IAAUU,EAAS,YAAYV,CAAK,EAAa,IAAI,CACtF,CASA,cAAcb,EAAoB,GAAOC,EAAmB,GAAe,CACzE,GAAI,KAAK,OAAS,IAChB,MAAM,IAAI,MAAM,kBAAkB,EAEpC,IAAMuB,EAASzB,EAAqB,KAAK,YAAc,MAAQC,EAAUC,CAAO,EAC1EM,EAAQ3B,EAAQ,KAAK,KAAK,EAC1B6C,EAAoB,KAAK,kBACzBZ,EAAQxB,EAAM,KAAK,MAAO,CAAC,EAE3B2B,EAAY,KAAK,UAEjBU,EACJ,KAAK,YAAc,MAAQ,CAAC1B,EAAWnB,EAAO,CAAC,OAAQ,KAAK,UAAU,CAAC,EAAI,KAAK,UAC5EsB,EAActB,EAAO,CAAC2C,EAAQjB,EAAOkB,EAAmBZ,EAAOG,EAAWU,CAAG,CAAC,EAEpF,OAAO7B,EAAYM,CAAW,CAChC,CAQA,OAAO,SAASwB,EAAc,CAC5B,IAAMC,EAAYtC,EAAS,mBAAmBqC,CAAI,EAElD,OAAO,IAAIjB,EAAS,CAClB,UAAW5B,EAAS8C,EAAU,MAAM,EAAE,CAAC,EACvC,WAAY9C,EAAS8C,EAAU,MAAM,EAAG,EAAE,CAAC,CAC7C,CAAC,CACH,CAEA,OAAO,gBAAgBzB,EAAqB,CAC1C,IAAMc,EAAQvC,EAAO,OAAOyB,CAAW,EACjC0B,EAAgBhC,EAAYoB,EAAM,MAAM,EAAG,EAAE,CAAC,IAAMd,EAE1D,GAAIc,EAAM,SAAW,IAAM,CAACb,EAAmBa,CAAK,EAClD,MAAM,IAAI,MAAM,sBAAsB,EAExC,GAAI,CAACY,EAAe,MAAM,IAAI,MAAM,sBAAsB,EAE1D,IAAMtB,EAAQU,EAAM,GACdQ,EAAoB7C,EAAQqC,EAAM,MAAM,EAAG,CAAC,CAAC,EAC7CJ,EAAQ,SAASjC,EAAQqC,EAAM,MAAM,EAAG,EAAE,CAAC,EAAE,UAAU,CAAC,EAAG,EAAE,EAC7DD,EAAYpC,EAAQqC,EAAM,MAAM,GAAI,EAAE,CAAC,EACvCS,EAAMT,EAAM,MAAM,GAAI,EAAE,EAE9B,GAAKV,IAAU,GAAKkB,IAAsB,cAAkBlB,IAAU,GAAKM,IAAU,EACnF,MAAM,IAAI,MAAM,eAAe,EAGjC,GAAIX,EAAoBe,CAAK,EAAG,CAC9B,GAAIS,EAAI,KAAO,EACb,MAAM,IAAI,MAAM,6BAA6B,EAG/C,OAAO,IAAIhB,EAAS,CAClB,UAAWgB,EACX,UAAAV,EACA,MAAAH,EACA,MAAAN,EACA,kBAAAkB,CACF,CAAC,CACH,CAEA,GAAIC,EAAI,KAAO,EACb,MAAM,IAAI,MAAM,8BAA8B,EAGhD,OAAO,IAAIhB,EAAS,CAClB,WAAYgB,EAAI,MAAM,CAAC,EACvB,UAAAV,EACA,MAAAH,EACA,MAAAN,EACA,kBAAAkB,CACF,CAAC,CACH,CACF,EAEOK,EAAQpB","names":["Base58","hexDataSlice","hexlify","concat","arrayify","computeHmac","ripemd160","sha256","SupportedAlgorithm","bn","toBytes","toHex","Mnemonic","Signer","HARDENED_INDEX","MainnetPRV","MainnetPUB","TestnetPRV","TestnetPUB","base58check","data","getExtendedKeyPrefix","isPublic","testnet","isPublicExtendedKey","extendedKey","isValidExtendedKey","parsePath","path","depth","components","p","HDWallet","config","signer","index","privateKey","publicKey","chainCode","bytes","IL","IR","N","ki","Ki","hdwallet","prefix","parentFingerprint","key","seed","masterKey","validChecksum","hdwallet_default"]}
{"version":3,"sources":["../src/script.ts","../src/errors.ts","../src/constants.ts","../src/utils.ts","../src/scripts.ts"],"sourcesContent":["import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport {\n  VM_TX_MEMORY,\n  TRANSACTION_SCRIPT_FIXED_SIZE,\n  ASSET_ID_LEN,\n  WORD_SIZE,\n  CONTRACT_ID_LEN,\n} from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\nimport type {\n  CallResult,\n  TransactionResultReceipt,\n  TransactionResultReturnReceipt,\n  TransactionResultReturnDataReceipt,\n  TransactionResultRevertReceipt,\n  TransactionResultScriptResultReceipt,\n  TransactionResult,\n} from '@fuel-ts/providers';\nimport { ReceiptType, ByteArrayCoder } from '@fuel-ts/transactions';\n\nimport { ScriptResultDecoderError } from './errors';\n\nexport type ScriptResult = {\n  code: BN;\n  gasUsed: BN;\n  receipts: TransactionResultReceipt[];\n  scriptResultReceipt: TransactionResultScriptResultReceipt;\n  returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt;\n  callResult: CallResult;\n};\n\nfunction callResultToScriptResult(callResult: CallResult): ScriptResult {\n  const receipts = [...callResult.receipts];\n\n  // Every script call ends with two specific receipts\n  // Here we check them so `this.scriptResultDecoder` doesn't have to\n  const scriptResultReceipt = receipts.pop();\n  if (!scriptResultReceipt) {\n    throw new Error(`Expected scriptResultReceipt`);\n  }\n  if (scriptResultReceipt.type !== ReceiptType.ScriptResult) {\n    throw new Error(`Invalid scriptResultReceipt type: ${scriptResultReceipt.type}`);\n  }\n  const returnReceipt = receipts.pop();\n  if (!returnReceipt) {\n    throw new Error(`Expected returnReceipt`);\n  }\n  if (\n    returnReceipt.type !== ReceiptType.Return &&\n    returnReceipt.type !== ReceiptType.ReturnData &&\n    returnReceipt.type !== ReceiptType.Revert\n  ) {\n    throw new Error(`Invalid returnReceipt type: ${returnReceipt.type}`);\n  }\n\n  const scriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult,\n  };\n\n  return scriptResult;\n}\nexport class Script<TData = void, TResult = void> {\n  bytes: Uint8Array;\n  scriptDataEncoder: (data: TData) => Uint8Array;\n  scriptResultDecoder: (scriptResult: ScriptResult) => TResult;\n\n  constructor(\n    bytes: BytesLike,\n    scriptDataEncoder: (data: TData) => Uint8Array,\n    scriptResultDecoder: (scriptResult: ScriptResult) => TResult\n  ) {\n    this.bytes = arrayify(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder;\n  }\n\n  getScriptDataOffset() {\n    return (\n      VM_TX_MEMORY +\n      TRANSACTION_SCRIPT_FIXED_SIZE +\n      new ByteArrayCoder(this.bytes.length).encodedLength\n    );\n  }\n\n  /**\n   * Returns the memory offset for the contract call argument\n   * Used for struct inputs\n   */\n  getArgOffset() {\n    const callDataOffset = this.getScriptDataOffset() + ASSET_ID_LEN + WORD_SIZE;\n    return callDataOffset + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\n  }\n\n  /**\n   * Encodes the data for a script call\n   */\n  encodeScriptData(data: TData): Uint8Array {\n    return this.scriptDataEncoder(data);\n  }\n\n  /**\n   * Decodes the result of a script call\n   */\n  decodeCallResult(callResult: CallResult): TResult {\n    try {\n      const scriptResult = callResultToScriptResult(callResult);\n      return this.scriptResultDecoder(scriptResult);\n    } catch (error) {\n      throw new ScriptResultDecoderError(\n        callResult as TransactionResult<'failure'>,\n        (error as Error).message\n      );\n    }\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/constants';\nimport type {\n  TransactionResult,\n  TransactionResultLogDataReceipt,\n  TransactionResultLogReceipt,\n  TransactionResultRevertReceipt,\n} from '@fuel-ts/providers';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport { getDocs } from './utils';\n\nconst bigintReplacer = (key: unknown, value: unknown) =>\n  typeof value === 'bigint' ? value.toString() : value;\n\nconst printLineWithId = (id: string, line: string) =>\n  `${id === ZeroBytes32 ? 'script' : id}: ${line}`;\n\nexport class ScriptResultDecoderError extends Error {\n  constructor(result: TransactionResult<'failure'>, message: string) {\n    const docLink = JSON.stringify(getDocs(result.status), null, 2);\n    const revertReceipts = result.receipts.filter(\n      (r) => r.type === ReceiptType.Revert\n    ) as TransactionResultRevertReceipt[];\n    const revertsText = revertReceipts.length\n      ? `Reverts:\\n${revertReceipts\n          .map(({ id, ...r }) =>\n            printLineWithId(id, `${r.val} ${JSON.stringify(r, bigintReplacer)}`)\n          )\n          .join('\\n')}`\n      : null;\n    const logReceipts = result.receipts.filter(\n      (r) => r.type === ReceiptType.Log || r.type === ReceiptType.LogData\n    ) as Array<TransactionResultLogReceipt | TransactionResultLogDataReceipt>;\n    const logsText = logReceipts.length\n      ? `Logs:\\n${logReceipts\n          .map(({ type, id, ...r }) =>\n            printLineWithId(\n              id,\n              `${\n                type === ReceiptType.LogData ? (r as TransactionResultLogDataReceipt).data : r.val0\n              }`\n            )\n          )\n          .join('\\n')}`\n      : null;\n    const receiptsText = `Receipts:\\n${JSON.stringify(\n      result.receipts.map(({ type, ...r }) => ({ type: ReceiptType[type], ...r })),\n      bigintReplacer,\n      2\n    )}`;\n    super(\n      `${message}\\n\\n${docLink}\\n\\n${revertsText ? `${revertsText}\\n\\n` : ''}${\n        logsText ? `${logsText}\\n\\n` : ''\n      }${receiptsText}`\n    );\n  }\n}\n","// From https://github.com/FuelLabs/fuel-asm/blob/eb78378c3b7c22a53b834381c387d89b3c0ef122/src/panic_reason.rs#L13\nexport const PANIC_REASONS = [\n  'Success',\n  'Revert',\n  'OutOfGas',\n  'TransactionValidity',\n  'MemoryOverflow',\n  'ArithmeticOverflow',\n  'ContractNotFound',\n  'MemoryOwnership',\n  'NotEnoughBalance',\n  'ExpectedInternalContext',\n  'AssetIdNotFound',\n  'InputNotFound',\n  'OutputNotFound',\n  'WitnessNotFound',\n  'TransactionMaturity',\n  'InvalidMetadataIdentifier',\n  'MalformedCallStructure',\n  'ReservedRegisterNotWritable',\n  'ErrorFlag',\n  'InvalidImmediateValue',\n  'ExpectedCoinInput',\n  'MaxMemoryAccess',\n  'MemoryWriteOverlap',\n  'ContractNotInInputs',\n  'InternalBalanceOverflow',\n  'ContractMaxSize',\n  'ExpectedUnallocatedStack',\n  'MaxStaticContractsReached',\n  'TransferAmountCannotBeZero',\n  'ExpectedOutputVariable',\n  'ExpectedParentInternalContext',\n  'IllegalJump',\n  'NonZeroMessageOutputRecipient',\n  'ZeroedMessageOutputRecipient',\n];\n\nexport const PANIC_DOC_URL = 'https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html';\n","import type { TransactionResult } from '@fuel-ts/providers';\n\nimport { PANIC_DOC_URL, PANIC_REASONS } from './constants';\n\nconst getFailureReason = (reason: string): string =>\n  PANIC_REASONS.includes(reason) ? reason : 'unknown';\n\nexport const getDocs = (\n  status: TransactionResult<'failure'>['status']\n): { doc: string; reason: string } => {\n  if (status?.type === 'failure') {\n    const reason = getFailureReason(status.reason);\n    return {\n      doc: reason !== 'unknown' ? `${PANIC_DOC_URL}#variant.${reason}` : PANIC_DOC_URL,\n      reason,\n    };\n  }\n  return { doc: PANIC_DOC_URL, reason: 'unknown' };\n};\n","import { Script } from './script';\n\n/**\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new Script(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n"],"mappings":"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","names":["arrayify","VM_TX_MEMORY","TRANSACTION_SCRIPT_FIXED_SIZE","ASSET_ID_LEN","WORD_SIZE","CONTRACT_ID_LEN","ReceiptType","ByteArrayCoder","ZeroBytes32","ReceiptType","PANIC_REASONS","PANIC_DOC_URL","getFailureReason","reason","PANIC_REASONS","getDocs","status","PANIC_DOC_URL","bigintReplacer","key","value","printLineWithId","id","line","ZeroBytes32","ScriptResultDecoderError","result","message","docLink","getDocs","revertReceipts","r","ReceiptType","revertsText","logReceipts","logsText","type","receiptsText","callResultToScriptResult","callResult","receipts","scriptResultReceipt","ReceiptType","returnReceipt","Script","bytes","scriptDataEncoder","scriptResultDecoder","arrayify","VM_TX_MEMORY","TRANSACTION_SCRIPT_FIXED_SIZE","ByteArrayCoder","ASSET_ID_LEN","WORD_SIZE","CONTRACT_ID_LEN","data","scriptResult","error","ScriptResultDecoderError","returnZeroScript","Script"]}
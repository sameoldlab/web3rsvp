import { BytesLike } from '@ethersproject/bytes';
import { BN } from '@fuel-ts/math';
import { TransactionResultReceipt, TransactionResultScriptResultReceipt, TransactionResultReturnReceipt, TransactionResultReturnDataReceipt, TransactionResultRevertReceipt, CallResult } from '@fuel-ts/providers';

declare type ScriptResult = {
    code: BN;
    gasUsed: BN;
    receipts: TransactionResultReceipt[];
    scriptResultReceipt: TransactionResultScriptResultReceipt;
    returnReceipt: TransactionResultReturnReceipt | TransactionResultReturnDataReceipt | TransactionResultRevertReceipt;
    callResult: CallResult;
};
declare class Script<TData = void, TResult = void> {
    bytes: Uint8Array;
    scriptDataEncoder: (data: TData) => Uint8Array;
    scriptResultDecoder: (scriptResult: ScriptResult) => TResult;
    constructor(bytes: BytesLike, scriptDataEncoder: (data: TData) => Uint8Array, scriptResultDecoder: (scriptResult: ScriptResult) => TResult);
    getScriptDataOffset(): number;
    /**
     * Returns the memory offset for the contract call argument
     * Used for struct inputs
     */
    getArgOffset(): number;
    /**
     * Encodes the data for a script call
     */
    encodeScriptData(data: TData): Uint8Array;
    /**
     * Decodes the result of a script call
     */
    decodeCallResult(callResult: CallResult): TResult;
}

/**
 * A script that just returns zero
 *
 * Accepts nothing
 * Returns nothing
 *
 * Used for coin transfer transactions
 */
declare const returnZeroScript: Script<void, undefined>;

export { Script, ScriptResult, returnZeroScript };

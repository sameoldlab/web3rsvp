declare class Node {
    left: number;
    right: number;
    parent: number;
    hash: string;
    data: string;
    sum: string;
    index: number;
    constructor(left: number, right: number, parent: number, hash: string, sum: string, data: string, index?: number);
}

declare class Proof {
    sideNodes: string[];
    nodeSums: string[];
    constructor(sideNodes: string[], sums: string[]);
}

/**
 * Slice off the '0x' on each argument to simulate abi.encodePacked
 * hash(prefix + value + data)
 */
declare function hashLeaf(value: string, data: string): string;
/**
 * Slice off the '0x' on each argument to simulate abi.encodePacked
 * hash (prefix + leftSum + leftHash + rightSum + rightHash)
 */
declare function hashNode(leftValue: string, left: string, rightValue: string, right: string): string;
/**
 * Construct tree
 */
declare function constructTree(sums: string[], data: string[]): Node[];
/**
 * Compute the merkle root
 */
declare function calcRoot(sums: string[], data: string[]): Node;
/**
 * Get proof for the leaf
 */
declare function getProof(nodes: Node[], id: number): Proof;

export { calcRoot, constructTree, getProof, hashLeaf, hashNode };

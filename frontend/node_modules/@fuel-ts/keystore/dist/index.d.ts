interface Keystore {
    data: string;
    iv: string;
    salt: string;
}
/**
 * Generate a pbkdf2 key from a password and random salt
 */
declare function keyFromPassword(password: string, saltBuffer: Uint8Array): Uint8Array;

declare const randomBytes: (length: number) => Uint8Array;

/**
 * Encrypts a data object that can be any serializable value using
 * a provided password.
 *
 * @returns Promise<Keystore> Keystore object
 */
declare function encrypt<T>(password: string, data: T): Promise<Keystore>;
/**
 * Given a password and a keystore object, decrypts the text and returns
 * the resulting value
 *
 *  @returns Promise<T> T object
 */
declare function decrypt<T>(password: string, keystore: Keystore): Promise<T>;

export { Keystore, decrypt, encrypt, keyFromPassword, randomBytes };

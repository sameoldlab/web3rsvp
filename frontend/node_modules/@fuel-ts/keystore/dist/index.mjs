var h=(r=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(r,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):r)(function(r){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});import{arrayify as S}from"@ethersproject/bytes";import{pbkdf2 as C}from"@ethersproject/pbkdf2";var b,v="Node";typeof globalThis<"u"&&globalThis.crypto&&(b=globalThis.crypto,v="Web");if(!b&&typeof h=="function")try{b=h("crypto"),v="Node"}catch(r){console.error("keystore expects a standard Web browser or Node environment.",r)}var s=b,i=v;function c(r,t="base64"){return i==="Node"?Buffer.from(r,t):t==="utf-8"?new TextEncoder().encode(r):new Uint8Array(atob(r).split("").map(e=>e.charCodeAt(0)))}function f(r,t="base64"){return i==="Node"?Buffer.from(r).toString(t):btoa(String.fromCharCode.apply(null,new Uint8Array(r)))}function m(r,t){let e=c(String(r).normalize("NFKC"),"utf-8"),o=C(e,t,1e5,32,"sha256");return S(o)}var u=r=>i==="Node"?s.randomBytes(r):s.getRandomValues(new Uint8Array(r));var x="aes-256-ctr";async function B(r,t){let e=u(16),o=u(32),p=m(r,o),y=Uint8Array.from(Buffer.from(JSON.stringify(t),"utf-8")),n=s.createCipheriv(x,p,e),a=n.update(y);return a=Buffer.concat([a,n.final()]),{data:f(a),iv:f(e),salt:f(o)}}async function w(r,t){let e=c(t.iv),o=c(t.salt),p=m(r,o),y=c(t.data),n=s.createDecipheriv(x,p,e),a=n.update(y),g=Buffer.concat([a,n.final()]),T=Buffer.from(g).toString("utf-8");try{return JSON.parse(T)}catch{throw new Error("Invalid credentials")}}var N="AES-CTR";async function A(r,t){let e=u(16),o=u(32),p=m(r,o),y=Uint8Array.from(Buffer.from(JSON.stringify(t),"utf-8")),n={name:N,counter:e,length:64},a=await s.subtle.importKey("raw",p,n,!1,["encrypt"]),g=await s.subtle.encrypt(n,a,y);return{data:f(g),iv:f(e),salt:f(o)}}async function K(r,t){let e=c(t.iv),o=c(t.salt),p=m(r,o),y=c(t.data),n={name:N,counter:e,length:64},a=await s.subtle.importKey("raw",p,n,!1,["decrypt"]),g=await s.subtle.decrypt(n,a,y),T=new TextDecoder().decode(g);try{return JSON.parse(T)}catch{throw new Error("Invalid credentials")}}async function Q(r,t){return i==="Node"?B(r,t):A(r,t)}async function X(r,t){return i==="Node"?w(r,t):K(r,t)}export{X as decrypt,Q as encrypt,m as keyFromPassword,u as randomBytes};
//# sourceMappingURL=index.mjs.map
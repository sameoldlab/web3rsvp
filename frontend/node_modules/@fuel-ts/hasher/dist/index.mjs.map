{"version":3,"sources":["../src/hasher.ts"],"sourcesContent":["import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { ZeroBytes32 } from '@fuel-ts/constants';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionRequestLike } from '@fuel-ts/providers';\nimport { transactionRequestify, TransactionType } from '@fuel-ts/providers';\nimport type { UtxoId } from '@fuel-ts/transactions';\nimport { OutputType, InputType, TransactionCoder } from '@fuel-ts/transactions';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return sha256(Buffer.from(msg));\n}\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequestLike: TransactionRequestLike) {\n  const transactionRequest = transactionRequestify(transactionRequestLike);\n  // Return a new transaction object without references to the original transaction request\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = cloneDeep(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txoPointer\n      case InputType.Coin: {\n        // inputClone.txoPointer = 0;\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txoPointer\n      case InputType.Contract: {\n        // inputClone.txoPointer;\n        inputClone.utxoID = <UtxoId>{\n          transactionId: ZeroBytes32,\n          outputIndex: 0,\n        };\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = cloneDeep(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  return sha256(new TransactionCoder().encode(transaction));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike) {\n  return sha256(data);\n}\n"],"mappings":"AACA,OAAS,UAAAA,MAAc,sBACvB,OAAS,eAAAC,MAAmB,qBAC5B,OAAS,MAAAC,MAAU,gBAEnB,OAAS,yBAAAC,EAAuB,mBAAAC,MAAuB,qBAEvD,OAAS,cAAAC,EAAY,aAAAC,EAAW,oBAAAC,MAAwB,wBACxD,OAAOC,MAAe,mBAQf,SAASC,EAAYC,EAAa,CACvC,OAAOV,EAAO,OAAO,KAAKU,CAAG,CAAC,CAChC,CAQO,SAASC,EAAgBC,EAAgD,CAG9E,IAAMC,EAFqBV,EAAsBS,CAAsB,EAEhC,cAAc,EAErD,OAAIC,EAAY,OAAST,EAAgB,SACvCS,EAAY,aAAeZ,GAI7BY,EAAY,OAASA,EAAY,OAAO,IAAKC,GAAU,CACrD,IAAMC,EAAaP,EAAUM,CAAK,EAElC,OAAQC,EAAW,WAEZT,EAAU,KAEb,OAAOS,OAGJT,EAAU,SAEb,OAAAS,EAAW,OAAiB,CAC1B,cAAed,EACf,YAAa,CACf,EACAc,EAAW,YAAcd,EACzBc,EAAW,UAAYd,EAChBc,UAGP,OAAOA,EAEb,CAAC,EAEDF,EAAY,QAAUA,EAAY,QAAQ,IAAKG,GAAW,CACxD,IAAMC,EAAcT,EAAUQ,CAAM,EAEpC,OAAQC,EAAY,WAEbZ,EAAW,SACd,OAAAY,EAAY,YAAchB,EAC1BgB,EAAY,UAAYhB,EACjBgB,OAGJZ,EAAW,OACd,OAAAY,EAAY,OAASf,EAAG,CAAC,EAClBe,OAGJZ,EAAW,SACd,OAAAY,EAAY,GAAKhB,EACjBgB,EAAY,OAASf,EAAG,CAAC,EACzBe,EAAY,QAAUhB,EACfgB,UAGP,OAAOA,EAEb,CAAC,EACDJ,EAAY,eAAiB,EAC7BA,EAAY,UAAY,CAAC,EAElBb,EAAO,IAAIO,EAAiB,EAAE,OAAOM,CAAW,CAAC,CAC1D,CAQO,SAASK,EAAKC,EAAiB,CACpC,OAAOnB,EAAOmB,CAAI,CACpB","names":["sha256","ZeroBytes32","bn","transactionRequestify","TransactionType","OutputType","InputType","TransactionCoder","cloneDeep","hashMessage","msg","hashTransaction","transactionRequestLike","transaction","input","inputClone","output","outputClone","hash","data"]}
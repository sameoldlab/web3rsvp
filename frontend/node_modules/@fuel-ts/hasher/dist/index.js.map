{"version":3,"sources":["../src/index.ts","../src/hasher.ts"],"sourcesContent":["export * from './hasher';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { ZeroBytes32 } from '@fuel-ts/constants';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionRequestLike } from '@fuel-ts/providers';\nimport { transactionRequestify, TransactionType } from '@fuel-ts/providers';\nimport type { UtxoId } from '@fuel-ts/transactions';\nimport { OutputType, InputType, TransactionCoder } from '@fuel-ts/transactions';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return sha256(Buffer.from(msg));\n}\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequestLike: TransactionRequestLike) {\n  const transactionRequest = transactionRequestify(transactionRequestLike);\n  // Return a new transaction object without references to the original transaction request\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = cloneDeep(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txoPointer\n      case InputType.Coin: {\n        // inputClone.txoPointer = 0;\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txoPointer\n      case InputType.Contract: {\n        // inputClone.txoPointer;\n        inputClone.utxoID = <UtxoId>{\n          transactionId: ZeroBytes32,\n          outputIndex: 0,\n        };\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = cloneDeep(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  return sha256(new TransactionCoder().encode(transaction));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike) {\n  return sha256(data);\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,UAAAE,EAAA,gBAAAC,EAAA,oBAAAC,IAAA,eAAAC,EAAAL,GCCA,IAAAM,EAAuB,+BACvBC,EAA4B,8BAC5BC,EAAmB,yBAEnBC,EAAuD,8BAEvDC,EAAwD,iCACxDC,EAAsB,+BAQf,SAASC,EAAYC,EAAa,CACvC,SAAO,UAAO,OAAO,KAAKA,CAAG,CAAC,CAChC,CAQO,SAASC,EAAgBC,EAAgD,CAG9E,IAAMC,KAFqB,yBAAsBD,CAAsB,EAEhC,cAAc,EAErD,OAAIC,EAAY,OAAS,kBAAgB,SACvCA,EAAY,aAAe,eAI7BA,EAAY,OAASA,EAAY,OAAO,IAAKC,GAAU,CACrD,IAAMC,KAAa,EAAAC,SAAUF,CAAK,EAElC,OAAQC,EAAW,WAEZ,YAAU,KAEb,OAAOA,OAGJ,YAAU,SAEb,OAAAA,EAAW,OAAiB,CAC1B,cAAe,cACf,YAAa,CACf,EACAA,EAAW,YAAc,cACzBA,EAAW,UAAY,cAChBA,UAGP,OAAOA,EAEb,CAAC,EAEDF,EAAY,QAAUA,EAAY,QAAQ,IAAKI,GAAW,CACxD,IAAMC,KAAc,EAAAF,SAAUC,CAAM,EAEpC,OAAQC,EAAY,WAEb,aAAW,SACd,OAAAA,EAAY,YAAc,cAC1BA,EAAY,UAAY,cACjBA,OAGJ,aAAW,OACd,OAAAA,EAAY,UAAS,MAAG,CAAC,EAClBA,OAGJ,aAAW,SACd,OAAAA,EAAY,GAAK,cACjBA,EAAY,UAAS,MAAG,CAAC,EACzBA,EAAY,QAAU,cACfA,UAGP,OAAOA,EAEb,CAAC,EACDL,EAAY,eAAiB,EAC7BA,EAAY,UAAY,CAAC,KAElB,UAAO,IAAI,mBAAiB,EAAE,OAAOA,CAAW,CAAC,CAC1D,CAQO,SAASM,EAAKC,EAAiB,CACpC,SAAO,UAAOA,CAAI,CACpB","names":["src_exports","__export","hash","hashMessage","hashTransaction","__toCommonJS","import_sha2","import_constants","import_math","import_providers","import_transactions","import_lodash","hashMessage","msg","hashTransaction","transactionRequestLike","transaction","input","inputClone","cloneDeep","output","outputClone","hash","data"]}